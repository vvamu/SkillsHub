@using Microsoft.AspNetCore.Identity
@using SkillsHub.Domain.BaseModels;
@using SkillsHub.Domain.Models;
@inject UserManager<ApplicationUser> _userManager;
@inject SkillsHub.Persistence.ApplicationDbContext _context;

@model ApplicationUser;
@{
    var condition = (User.IsInRole("Admin") || User.Identity.Name == Model.Login) && Model != null && Model.UserStudent != null;
}

@if (condition)
{
    var student = Model.UserStudent ?? new SkillsHub.Domain.Models.Student();
    var visitedLessons = Model.UserStudent.VisitedLessons;
    var TotalLessons = Model.UserStudent.Lessons;

<div class="card">
        <div class="card-body">
            <div>
                @{
                    <form style="display:flex; justify-content:space-between">
                        <input type="hidden" asp-for="@student.Id" value="@student.Id" />
                        <input type="hidden" asp-for="@student.ApplicationUserId" value="@Model.Id" />
                        
                       
                        <h3>Статистика ученика - @Model.UserStudent.Status</h3>
                       
                        @if (student.Id == Guid.Empty)
                        {
                            student.Id = Model.Id;
                        }
                        @if(User.IsInRole("Admin"))
                        {
                           <!-- <input class="btn btn-primary btn-sm" type="submit" value="↑↓" asp-route-id="student.Id" asp-action="Activate" asp-route-userId="Model.Id" asp-controller="Student" /> -->

                        }

                    </form>

                }

            </div>
            @if (!User.IsInRole("Admin") && !User.IsInRole("Teacher") && !User.IsInRole("Student"))
            {
                <div style="display:flex; justify-content:space-between">
                    <b>Рабочее расписание: </b>
                    @if (student.WorkingDays != null)
                    {
                        <ol style="padding-left:0.2%">

                            @foreach (var item in student.WorkingDays.Split("-"))
                            {
                                <li>@item.ToString()</li>
                            }
                        </ol>
                    }
                    <b></b>
                    <b></b>



                </div>
            }

            
            <div style="display:flex; justify-content:space-between">

                <b>Направления работы:</b> @{
                    if (student.PossibleCources != null && student.CurrentPossibleCourses != null)
                    {

                        
                            @foreach (var item in student?.CurrentPossibleCourses?.Select(x => x.LessonType.Name))
                            {
                                <div>@item</div>
                            }
                      
                    }
                    else
                    {
                        <span>Отсутствуют</span>
                    }
                }
                <b></b>
                <hr />
                <!------------------------CHANGEEEEE------------------------------->

            </div>


            
            <hr/>
            <div>
                @{
                    var visitedLessonsCount = _context.LessonStudents.Where(x => x.ParentId == null).Where(x => x.StudentId == Model.UserStudent.Id).Select(x => x.Lesson).Where(x => x.IsСompleted).Where(x => x.ParentId == null && !x.IsDeleted).Count();
                    var missedLessonsCount = _context.LessonStudents.Where(x => x.StudentId == Model.UserStudent.Id && (x.VisitStatus==2 || x.VisitStatus ==3)).Select(x => x.Lesson).Where(x => x.IsСompleted).Where(x => x.ParentId == null && !x.IsDeleted).Count();
                    var missedLessonsCountWithoutWriteOff = _context.LessonStudents.Where(x => x.StudentId == Model.UserStudent.Id && (x.VisitStatus == 3)).Select(x => x.Lesson).Where(x => x.IsСompleted).Where(x => x.ParentId == null && !x.IsDeleted).Count();

                    var arrivedLessonsCount = _context.LessonStudents.Where(x => x.StudentId == Model.UserStudent.Id).Select(x => x.Lesson).Count();
                }
                <div>Занятия :</div>
                <div>Посещено @visitedLessonsCount @if (@missedLessonsCount != 0)
                {
                    <span>(пропущено @missedLessonsCount, без списания занятий - @missedLessonsCountWithoutWriteOff)</span>
                } из @arrivedLessonsCount
                </div>
                <div>Цена к оплате : --- BYN</div>
              
            </div>
            <!--
                  Payable now / for full courses: Model.UserStudent.CurrentCalculatedPrice BYN / Model.UserStudent.TotalCalculatedPrice BYN
            <div>
                Выплачено: --- BYN
            </div>
            -->
            <!--
            <div>
                Посещено групп англ / индив англ / групп прогр:
            </div>
            -->
            <!--
            <div>
                Ожидаемые групповых английский / индивидуальных английский / групповых программирование:
            </div>
            -->
            <!--
            <div>
                Оплачено групповых английский / индивидуальных английский / групповых программирование:
            </div>
            -->

        </div>
    </div>


}
