@using SkillsHub.Domain.BaseModels;
@model List<ApplicationUser>;
@inject Microsoft.AspNetCore.Identity.SignInManager<ApplicationUser> _roleManager;
@inject SkillsHub.Persistence.ApplicationDbContext _context;


    @if (Model == null || Model.Count() == 0)
        {

                <div style=" display:flex;flex;grid-gap:20px;justify-content:center ">
                    <h3>Users list is empty</h3> 
                    

                </div>

        }

            else
            {
                
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-body">
                                    <h4 class="card-title">Users</h4>
                                    <div class="table-responsive">
                                        <table class="table table-striped table-bordered zero-configuration">
                                            <thead>
                                                <tr>
                                                    <th>Login</th>
                                                    <th>Full Name</th>
                                                    <th>Sex</th>
                                                    <th>Phone</th>
                                                    <th>Email</th>
                                                    <th>BirthDate and Age</th>
                                                    <th>Lessons teacher/student</th>
                                                    <th>Current groups teacher/student</th>
                                                    <th>Roles</th>
                                                    <th>Cources</th>
                                                    <th>Working days</th>
                                                    <th>Source Find Company</th>
                                                    
                                                    <th>Soft delete</th>
                                                    <th>Hard delete (from database)</th>

                                                </tr>
                                            </thead>
                                            <tbody>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @if (item.IsDeleted == false)
                {
                    <a asp-action="Item" asp-controller="Account" asp-route-itemId="@item.Id" style="font-weight:900;color:#7571f9">  @item.Login </a>

                }
                else
                {
                    <a asp-action="Item" asp-controller="Account" asp-route-itemId="@item.Id" style="font-weight:900;color:red">  @item.Login </a>
                }
            </td>
            <td>@item.FirstName @item.LastName @item.Surname</td>
            <td>@item.Sex</td>
            <td>@item.Phone</td>
            <td>@item.Email</td>
            <td>@(DateOnly.FromDateTime(item.BirthDate).ToShortDateString()) - @item.Age year</td>

            @{
                var teacherLessonsMonth = 0;
                var studentLessonsMonth = 0;
                var teacherLessons = 0;
                var studentLessons = 0;
                var teacherGroups = 0;
                var studentGroups =  0;
                
                var teacherExpected = 0;
                var studentExpected = 0;
                var currentMonth = DateTime.Now.Month;

               
                  // var ii = teacherLessonsMonth = item.UserTeacher.Groups;

                 _context.Lessons.ToList();
                 _context.Groups.ToList();
                 _context.LessonStudents.ToList();
                 _context.GroupStudents.ToList();

                     if (item.UserTeacher != null)
                    {
                        teacherExpected = _context.Lessons.Where(x=>x.TeacherId== item.UserTeacher.Id && x.IsСompleted ==  false).Count();
                        var teacherLessonss = _context.Lessons.Where(x=>x.TeacherId== item.UserTeacher.Id && x.IsСompleted ==  true);
                        teacherLessons = teacherLessonss.Count();
                        teacherLessonsMonth = teacherLessonss.Where(x=>x.EndTime.Month == currentMonth).Count();
                        teacherGroups = _context.GroupTeachers.Where(x=>x.TeacherId == item.UserTeacher.Id).Count();
                       
                       
                    }
                      if (item.UserStudent != null)
                      {
                          studentExpected = _context.LessonStudents.Where(x=>x.StudentId == item.UserStudent.Id && x.Lesson.IsСompleted ==  false).Count();
                        var lessonStudents = _context.LessonStudents.Where(x=>x.StudentId == item.UserStudent.Id && x.Lesson.IsСompleted ==  true);
                        studentLessons = lessonStudents.Count();
                        studentLessonsMonth = lessonStudents.Where(x=>x.Lesson != null && x.Lesson.EndTime.Month == currentMonth).Count();
                        studentGroups = _context.GroupStudents.Where(x=>x.StudentId == item.UserStudent.Id).Count();

                      }
                        
                   
               
                

            }
            <td>total passed: @teacherLessons / @studentLessons;<br/> by month: @teacherLessonsMonth / @studentLessonsMonth;<br/>expected: @teacherExpected/@studentExpected</td>
            <td>@teacherGroups / @studentGroups</td>
            <td>
                @{
                    var roles = await _roleManager.UserManager.GetRolesAsync(item);
                    string result = string.Join(",", roles.ToArray());
                    @result
                }
            </td>
            <td>@try{

                
                 @if(item.UserTeacher != null && item.UserTeacher.PossibleCources != null) { 
                 var teacherCources = item.UserTeacher.PossibleCources.Select(x=>x.Course).Select(x=>x.Name).ToList();

                 <p><strong>Teacher:</strong> @foreach(var cource in teacherCources){@cource}
                 </p> 
                 }
                 @if(item.UserStudent != null && item.UserStudent.PossibleCources != null) { 
                 var studentrCources = item.UserStudent.PossibleCources.Select(x=>x.Course).Select(x=>x.Name).ToList();

                 <p><strong>Student:</strong> @foreach(var cource in studentrCources)
                     {
                         @cource 
                     }
                 </p> 
                 } 
                 }
                 catch(Exception ex) {

                 }</td>


                  <td>
                    
                 @if(item.UserTeacher != null && item.UserTeacher.WorkingDays != null) { 

                 <p><strong>Teacher:</strong> @item.UserTeacher.WorkingDays
                 </p> 
                 }
                 @if(item.UserStudent != null && item.UserStudent.WorkingDays != null) { 
                     <p><strong>Student:</strong>  @item.UserStudent.WorkingDays 
                     </p> 
                 } 
                </td>
            <td>@item.SourceFindCompany</td>
            
            <td><a asp-action="SoftDelete" asp-controller="Account" asp-route-id="@item.Id" class="btn btn-danger btn-sm">Soft delete</a></td>
            <td><a asp-action="HardDelete" asp-controller="Account" asp-route-id="@item.Id" class="btn btn-warning btn-sm">Hard delete</a></td>
        </tr>
    }
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <th>Login</th>
                                            <th>Full Name</th>
                                            <th>Sex</th>
                                            <th>Phone</th>
                                            <th>Email</th>
                                            <th>BirthDate and Age</th>
                                            <th>Lessons teacher/student</th>
                                            <th>Current groups teacher/student</th>
                                            <th>Roles</th>
                                            <th>Cources</th>
                                            <th>Working days</th>
                                            <th>Source Find Company</th>
                                            
                                            <th>Soft delete</th>
                                            <th>Hard delete (from database)</th>

                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
}

                                            <script src="~/plugins/tables/js/jquery.dataTables.min.js"></script>
    <script src="~/plugins/tables/js/datatable/dataTables.bootstrap4.min.js"></script>
    <script src="~/plugins/tables/js/datatable-init/datatable-basic.min.js"></script>