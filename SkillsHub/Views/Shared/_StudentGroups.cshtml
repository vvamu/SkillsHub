@using SkillsHub.Domain.BaseModels;

@model (ApplicationUser user, List<Group>? groups);

@{

    var studentGroups = Model.groups;

}
@if (studentGroups != null)
{
    <div class="card">
        <div class="card-body">
            <div style="display:flex;justify-content:space-between;margin-bottom:10px">
                <h1>Student groups</h1>
                <!--
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                    +
                </button>
                -->
            </div>

            <br />


            <!--
            <nav class="navbar navbar-expand-lg bg-light">
                <div class="container-fluid">
                    <div class="collapse navbar-collapse" id="navbarSupportedContent">
                        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                            <li class="nav-item">
                                <a class="nav-link active" aria-current="page" href="#"><strong>All</strong></a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" aria-current="page" href="#">Current</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" aria-current="page" href="#">Last</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </nav>
            -->
            @{
                if (studentGroups != null)
                {
                    foreach (var item in studentGroups)
                    {
                        <div class="card">
                            <div class="card-body">
                                <h4><a asp-action="Item" asp-controller="Group" asp-route-id="@item.Id">Group @item.Name</a></h4>
                                @{
                                    var scheduleDays = string.Join(",", item.DaySchedules.Select(x => Enum.GetName(typeof(DayOfWeek), x.DayName)));
                                    var startTimes = item.DaySchedules.Select(x => x.WorkingStartTime).ToArray();
                                    var endTimes = item.DaySchedules.Select(x => x.WorkingEndTime).ToArray();
                                }

                                @if (item.Lessons != null)
                                {
                                    var countEndedLessons = item.Lessons.Where(x => x.IsСompleted).Count();
                                    var countLessons = item.Lessons.Count();
                                    var priceByEndedLessons = item.LessonType.TeacherPrice * countEndedLessons;
                                    var priceByLessons = item.LessonType.TeacherPrice * countLessons;

                                    <div class="card">
                                        <div class="card-body">
                                            <div style="display:flex;justify-content:space-between">
                                                <h5>Course - @item.CourseName.Name,  Lesson type: @item.LessonType.Name</h5>
                                                <div>
                                                    <h6>@countEndedLessons / @countLessons lessons - @priceByEndedLessons / @priceByLessons BYN</h6>
                                                </div>
                                            </div>
                                            <p>Schedule: 
                                                @for (int a = 0; a < startTimes.Count(); a++)
                                                {
                                                    <span>@startTimes[a].ToString() - @endTimes[a].ToString() , </span>

                                                }
                                                - @scheduleDays

                                            </p>
                                            <div style="margin:20px;align-items:center;display:flex;grid-gap:20px">
                                                @if (item.Lessons != null && item.Lessons.Count()!=0)
                                                {
                                                    var studentLessons = item.Lessons;//.Where(x => x.Teacher != null).Where(x => x.Teacher.Id == @Model.user.Id).ToList();


                                                    for (int i = 0; i < studentLessons.Count(); i++)
                                                    {
                                                        <div>
                                                            <div>@item.Lessons[i].StartTime.ToShortTimeString()</div>

                                                            <input type="checkbox" asp-for="@item.Lessons[i].IsСompleted" disabled />

                                                        </div>
                                                    }
                                                }else{
                                                    <div>Group not started yet</div>
                                                }
                                                
                                            </div>
                                        </div>

                                    </div>
                                }
                            </div>

                            </div>
                       
                       
                    }
                }
                else
                {
                    <div class="card">
                        <div class="card-body">
                            <h3>Groups list is empty</h3>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
}

